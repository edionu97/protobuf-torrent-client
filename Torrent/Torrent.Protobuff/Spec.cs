// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from spec.proto</summary>
public static partial class SpecReflection {

  #region Descriptor
  /// <summary>File descriptor for spec.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SpecReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpzcGVjLnByb3RvIkIKBk5vZGVJZBIMCgRob3N0GAEgASgJEgwKBHBvcnQY",
          "AiABKAUSDQoFb3duZXIYAyABKAkSDQoFaW5kZXgYBCABKAUiNgoJQ2h1bmtJ",
          "bmZvEg0KBWluZGV4GAEgASgNEgwKBHNpemUYAiABKA0SDAoEaGFzaBgDIAEo",
          "DCJUCghGaWxlSW5mbxIMCgRoYXNoGAEgASgMEgwKBHNpemUYAiABKA0SEAoI",
          "ZmlsZW5hbWUYAyABKAkSGgoGY2h1bmtzGAQgAygLMgouQ2h1bmtJbmZvInEK",
          "FU5vZGVSZXBsaWNhdGlvblN0YXR1cxIVCgRub2RlGAEgASgLMgcuTm9kZUlk",
          "EhIKCmNodW5rSW5kZXgYAiABKA0SFwoGc3RhdHVzGAMgASgOMgcuU3RhdHVz",
          "EhQKDGVycm9yTWVzc2FnZRgEIAEoCSJyChBOb2RlU2VhcmNoUmVzdWx0EhUK",
          "BG5vZGUYASABKAsyBy5Ob2RlSWQSFwoGc3RhdHVzGAIgASgOMgcuU3RhdHVz",
          "EhQKDGVycm9yTWVzc2FnZRgDIAEoCRIYCgVmaWxlcxgEIAMoCzIJLkZpbGVJ",
          "bmZvIkEKE1JlZ2lzdHJhdGlvblJlcXVlc3QSDQoFb3duZXIYASABKAkSDQoF",
          "aW5kZXgYAiABKAUSDAoEcG9ydBgDIAEoBSJFChRSZWdpc3RyYXRpb25SZXNw",
          "b25zZRIXCgZzdGF0dXMYASABKA4yBy5TdGF0dXMSFAoMZXJyb3JNZXNzYWdl",
          "GAIgASgJIiEKDVN1Ym5ldFJlcXVlc3QSEAoIc3VibmV0SWQYASABKAUiVwoO",
          "U3VibmV0UmVzcG9uc2USFwoGc3RhdHVzGAEgASgOMgcuU3RhdHVzEhQKDGVy",
          "cm9yTWVzc2FnZRgCIAEoCRIWCgVub2RlcxgDIAMoCzIHLk5vZGVJZCIjChJM",
          "b2NhbFNlYXJjaFJlcXVlc3QSDQoFcmVnZXgYASABKAkiYQoTTG9jYWxTZWFy",
          "Y2hSZXNwb25zZRIXCgZzdGF0dXMYASABKA4yBy5TdGF0dXMSFAoMZXJyb3JN",
          "ZXNzYWdlGAIgASgJEhsKCGZpbGVJbmZvGAMgAygLMgkuRmlsZUluZm8iMAoN",
          "U2VhcmNoUmVxdWVzdBINCgVyZWdleBgBIAEoCRIQCghzdWJuZXRJZBgCIAEo",
          "BSJjCg5TZWFyY2hSZXNwb25zZRIXCgZzdGF0dXMYASABKA4yBy5TdGF0dXMS",
          "FAoMZXJyb3JNZXNzYWdlGAIgASgJEiIKB3Jlc3VsdHMYAyADKAsyES5Ob2Rl",
          "U2VhcmNoUmVzdWx0Ii8KDVVwbG9hZFJlcXVlc3QSEAoIZmlsZW5hbWUYASAB",
          "KAkSDAoEZGF0YRgCIAEoDCJcCg5VcGxvYWRSZXNwb25zZRIXCgZzdGF0dXMY",
          "ASABKA4yBy5TdGF0dXMSFAoMZXJyb3JNZXNzYWdlGAIgASgJEhsKCGZpbGVJ",
          "bmZvGAMgASgLMgkuRmlsZUluZm8iQQoQUmVwbGljYXRlUmVxdWVzdBIbCghm",
          "aWxlSW5mbxgBIAEoCzIJLkZpbGVJbmZvEhAKCHN1Ym5ldElkGAIgASgFInIK",
          "EVJlcGxpY2F0ZVJlc3BvbnNlEhcKBnN0YXR1cxgBIAEoDjIHLlN0YXR1cxIU",
          "CgxlcnJvck1lc3NhZ2UYAiABKAkSLgoObm9kZVN0YXR1c0xpc3QYAyADKAsy",
          "Fi5Ob2RlUmVwbGljYXRpb25TdGF0dXMiNAoMQ2h1bmtSZXF1ZXN0EhAKCGZp",
          "bGVIYXNoGAEgASgMEhIKCmNodW5rSW5kZXgYAiABKA0iTAoNQ2h1bmtSZXNw",
          "b25zZRIXCgZzdGF0dXMYASABKA4yBy5TdGF0dXMSFAoMZXJyb3JNZXNzYWdl",
          "GAIgASgJEgwKBGRhdGEYAyABKAwiIwoPRG93bmxvYWRSZXF1ZXN0EhAKCGZp",
          "bGVIYXNoGAEgASgMIk8KEERvd25sb2FkUmVzcG9uc2USFwoGc3RhdHVzGAEg",
          "ASgOMgcuU3RhdHVzEhQKDGVycm9yTWVzc2FnZRgCIAEoCRIMCgRkYXRhGAMg",
          "ASgMItMICgdNZXNzYWdlEhsKBHR5cGUYASABKA4yDS5NZXNzYWdlLlR5cGUS",
          "LwoSbG9jYWxTZWFyY2hSZXF1ZXN0GAIgASgLMhMuTG9jYWxTZWFyY2hSZXF1",
          "ZXN0EjEKE2xvY2FsU2VhcmNoUmVzcG9uc2UYAyABKAsyFC5Mb2NhbFNlYXJj",
          "aFJlc3BvbnNlEiUKDXNlYXJjaFJlcXVlc3QYBCABKAsyDi5TZWFyY2hSZXF1",
          "ZXN0EicKDnNlYXJjaFJlc3BvbnNlGAUgASgLMg8uU2VhcmNoUmVzcG9uc2US",
          "JQoNdXBsb2FkUmVxdWVzdBgGIAEoCzIOLlVwbG9hZFJlcXVlc3QSJwoOdXBs",
          "b2FkUmVzcG9uc2UYByABKAsyDy5VcGxvYWRSZXNwb25zZRIrChByZXBsaWNh",
          "dGVSZXF1ZXN0GAggASgLMhEuUmVwbGljYXRlUmVxdWVzdBItChFyZXBsaWNh",
          "dGVSZXNwb25zZRgJIAEoCzISLlJlcGxpY2F0ZVJlc3BvbnNlEiMKDGNodW5r",
          "UmVxdWVzdBgKIAEoCzINLkNodW5rUmVxdWVzdBIlCg1jaHVua1Jlc3BvbnNl",
          "GAsgASgLMg4uQ2h1bmtSZXNwb25zZRIpCg9kb3dubG9hZFJlcXVlc3QYDCAB",
          "KAsyEC5Eb3dubG9hZFJlcXVlc3QSKwoQZG93bmxvYWRSZXNwb25zZRgNIAEo",
          "CzIRLkRvd25sb2FkUmVzcG9uc2USMQoTcmVnaXN0cmF0aW9uUmVxdWVzdBgO",
          "IAEoCzIULlJlZ2lzdHJhdGlvblJlcXVlc3QSMwoUcmVnaXN0cmF0aW9uUmVz",
          "cG9uc2UYDyABKAsyFS5SZWdpc3RyYXRpb25SZXNwb25zZRIlCg1zdWJuZXRS",
          "ZXF1ZXN0GBAgASgLMg4uU3VibmV0UmVxdWVzdBInCg5zdWJuZXRSZXNwb25z",
          "ZRgRIAEoCzIPLlN1Ym5ldFJlc3BvbnNlIu4CCgRUeXBlEhgKFExPQ0FMX1NF",
          "QVJDSF9SRVFVRVNUEAASGQoVTE9DQUxfU0VBUkNIX1JFU1BPTlNFEAESEgoO",
          "U0VBUkNIX1JFUVVFU1QQAhITCg9TRUFSQ0hfUkVTUE9OU0UQAxISCg5VUExP",
          "QURfUkVRVUVTVBAEEhMKD1VQTE9BRF9SRVNQT05TRRAFEhUKEVJFUExJQ0FU",
          "RV9SRVFVRVNUEAYSFgoSUkVQTElDQVRFX1JFU1BPTlNFEAcSEQoNQ0hVTktf",
          "UkVRVUVTVBAIEhIKDkNIVU5LX1JFU1BPTlNFEAkSFAoQRE9XTkxPQURfUkVR",
          "VUVTVBAKEhUKEURPV05MT0FEX1JFU1BPTlNFEAsSGAoUUkVHSVNUUkFUSU9O",
          "X1JFUVVFU1QQDBIZChVSRUdJU1RSQVRJT05fUkVTUE9OU0UQDRISCg5TVUJO",
          "RVRfUkVRVUVTVBAOEhMKD1NVQk5FVF9SRVNQT05TRRAPKmkKBlN0YXR1cxIL",
          "CgdTVUNDRVNTEAASFgoSVU5BQkxFX1RPX0NPTVBMRVRFEAESEQoNTUVTU0FH",
          "RV9FUlJPUhACEhEKDU5FVFdPUktfRVJST1IQAxIUChBQUk9DRVNTSU5HX0VS",
          "Uk9SEARiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Status), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeId), global::NodeId.Parser, new[]{ "Host", "Port", "Owner", "Index" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChunkInfo), global::ChunkInfo.Parser, new[]{ "Index", "Size", "Hash" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FileInfo), global::FileInfo.Parser, new[]{ "Hash", "Size", "Filename", "Chunks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeReplicationStatus), global::NodeReplicationStatus.Parser, new[]{ "Node", "ChunkIndex", "Status", "ErrorMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NodeSearchResult), global::NodeSearchResult.Parser, new[]{ "Node", "Status", "ErrorMessage", "Files" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegistrationRequest), global::RegistrationRequest.Parser, new[]{ "Owner", "Index", "Port" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegistrationResponse), global::RegistrationResponse.Parser, new[]{ "Status", "ErrorMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubnetRequest), global::SubnetRequest.Parser, new[]{ "SubnetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubnetResponse), global::SubnetResponse.Parser, new[]{ "Status", "ErrorMessage", "Nodes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocalSearchRequest), global::LocalSearchRequest.Parser, new[]{ "Regex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocalSearchResponse), global::LocalSearchResponse.Parser, new[]{ "Status", "ErrorMessage", "FileInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SearchRequest), global::SearchRequest.Parser, new[]{ "Regex", "SubnetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SearchResponse), global::SearchResponse.Parser, new[]{ "Status", "ErrorMessage", "Results" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UploadRequest), global::UploadRequest.Parser, new[]{ "Filename", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UploadResponse), global::UploadResponse.Parser, new[]{ "Status", "ErrorMessage", "FileInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReplicateRequest), global::ReplicateRequest.Parser, new[]{ "FileInfo", "SubnetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReplicateResponse), global::ReplicateResponse.Parser, new[]{ "Status", "ErrorMessage", "NodeStatusList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChunkRequest), global::ChunkRequest.Parser, new[]{ "FileHash", "ChunkIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChunkResponse), global::ChunkResponse.Parser, new[]{ "Status", "ErrorMessage", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DownloadRequest), global::DownloadRequest.Parser, new[]{ "FileHash" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DownloadResponse), global::DownloadResponse.Parser, new[]{ "Status", "ErrorMessage", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Message), global::Message.Parser, new[]{ "Type", "LocalSearchRequest", "LocalSearchResponse", "SearchRequest", "SearchResponse", "UploadRequest", "UploadResponse", "ReplicateRequest", "ReplicateResponse", "ChunkRequest", "ChunkResponse", "DownloadRequest", "DownloadResponse", "RegistrationRequest", "RegistrationResponse", "SubnetRequest", "SubnetResponse" }, null, new[]{ typeof(global::Message.Types.Type) }, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum Status {
  [pbr::OriginalName("SUCCESS")] Success = 0,
  /// <summary>
  /// there are no errors, but the requested operation cannot be completed
  /// </summary>
  [pbr::OriginalName("UNABLE_TO_COMPLETE")] UnableToComplete = 1,
  /// <summary>
  /// the incoming request or response is invalid in some way
  /// </summary>
  [pbr::OriginalName("MESSAGE_ERROR")] MessageError = 2,
  /// <summary>
  /// any network communication problem
  /// </summary>
  [pbr::OriginalName("NETWORK_ERROR")] NetworkError = 3,
  /// <summary>
  /// any other error
  /// </summary>
  [pbr::OriginalName("PROCESSING_ERROR")] ProcessingError = 4,
}

#endregion

#region Messages
/// <summary>
/// Common
/// </summary>
public sealed partial class NodeId : pb::IMessage<NodeId>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<NodeId> _parser = new pb::MessageParser<NodeId>(() => new NodeId());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeId> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeId() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeId(NodeId other) : this() {
    host_ = other.host_;
    port_ = other.port_;
    owner_ = other.owner_;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeId Clone() {
    return new NodeId(this);
  }

  /// <summary>Field number for the "host" field.</summary>
  public const int HostFieldNumber = 1;
  private string host_ = "";
  /// <summary>
  /// String containing either domain name  or IP (most likely)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Host {
    get { return host_; }
    set {
      host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 2;
  private int port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Port {
    get { return port_; }
    set {
      port_ = value;
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 3;
  private string owner_ = "";
  /// <summary>
  /// Short alias or acronym of the owner of the node
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 4;
  private int index_;
  /// <summary>
  /// Node index within the owner's nodes. Must be 1, 2, or 3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeId);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Host != other.Host) return false;
    if (Port != other.Port) return false;
    if (Owner != other.Owner) return false;
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Host.Length != 0) hash ^= Host.GetHashCode();
    if (Port != 0) hash ^= Port.GetHashCode();
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Host.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Host);
    }
    if (Port != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Port);
    }
    if (Owner.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Owner);
    }
    if (Index != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Host.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Host);
    }
    if (Port != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Port);
    }
    if (Owner.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Owner);
    }
    if (Index != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Host.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
    }
    if (Port != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
    }
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeId other) {
    if (other == null) {
      return;
    }
    if (other.Host.Length != 0) {
      Host = other.Host;
    }
    if (other.Port != 0) {
      Port = other.Port;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Host = input.ReadString();
          break;
        }
        case 16: {
          Port = input.ReadInt32();
          break;
        }
        case 26: {
          Owner = input.ReadString();
          break;
        }
        case 32: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Host = input.ReadString();
          break;
        }
        case 16: {
          Port = input.ReadInt32();
          break;
        }
        case 26: {
          Owner = input.ReadString();
          break;
        }
        case 32: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ChunkInfo : pb::IMessage<ChunkInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ChunkInfo> _parser = new pb::MessageParser<ChunkInfo>(() => new ChunkInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChunkInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkInfo(ChunkInfo other) : this() {
    index_ = other.index_;
    size_ = other.size_;
    hash_ = other.hash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkInfo Clone() {
    return new ChunkInfo(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  /// <summary>
  /// Chunk order number starting from 0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private uint size_;
  /// <summary>
  /// The standard chunk size is 1024. Last chunks will be smaller.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 3;
  private pb::ByteString hash_ = pb::ByteString.Empty;
  /// <summary>
  /// MD5 of the chunk content (1024 bytes or less)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Hash {
    get { return hash_; }
    set {
      hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChunkInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChunkInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Size != other.Size) return false;
    if (Hash != other.Hash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    if (Hash.Length != 0) hash ^= Hash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
    if (Hash.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Hash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
    if (Hash.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Hash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    if (Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChunkInfo other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    if (other.Hash.Length != 0) {
      Hash = other.Hash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
        case 26: {
          Hash = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
        case 26: {
          Hash = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class FileInfo : pb::IMessage<FileInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<FileInfo> _parser = new pb::MessageParser<FileInfo>(() => new FileInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FileInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FileInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FileInfo(FileInfo other) : this() {
    hash_ = other.hash_;
    size_ = other.size_;
    filename_ = other.filename_;
    chunks_ = other.chunks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FileInfo Clone() {
    return new FileInfo(this);
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 1;
  private pb::ByteString hash_ = pb::ByteString.Empty;
  /// <summary>
  /// MD5 of the file content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Hash {
    get { return hash_; }
    set {
      hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 2;
  private uint size_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Size {
    get { return size_; }
    set {
      size_ = value;
    }
  }

  /// <summary>Field number for the "filename" field.</summary>
  public const int FilenameFieldNumber = 3;
  private string filename_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Filename {
    get { return filename_; }
    set {
      filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunks" field.</summary>
  public const int ChunksFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ChunkInfo> _repeated_chunks_codec
      = pb::FieldCodec.ForMessage(34, global::ChunkInfo.Parser);
  private readonly pbc::RepeatedField<global::ChunkInfo> chunks_ = new pbc::RepeatedField<global::ChunkInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ChunkInfo> Chunks {
    get { return chunks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FileInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FileInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hash != other.Hash) return false;
    if (Size != other.Size) return false;
    if (Filename != other.Filename) return false;
    if(!chunks_.Equals(other.chunks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Hash.Length != 0) hash ^= Hash.GetHashCode();
    if (Size != 0) hash ^= Size.GetHashCode();
    if (Filename.Length != 0) hash ^= Filename.GetHashCode();
    hash ^= chunks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Hash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Hash);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
    if (Filename.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Filename);
    }
    chunks_.WriteTo(output, _repeated_chunks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Hash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Hash);
    }
    if (Size != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Size);
    }
    if (Filename.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Filename);
    }
    chunks_.WriteTo(ref output, _repeated_chunks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
    }
    if (Size != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
    }
    if (Filename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
    }
    size += chunks_.CalculateSize(_repeated_chunks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FileInfo other) {
    if (other == null) {
      return;
    }
    if (other.Hash.Length != 0) {
      Hash = other.Hash;
    }
    if (other.Size != 0) {
      Size = other.Size;
    }
    if (other.Filename.Length != 0) {
      Filename = other.Filename;
    }
    chunks_.Add(other.chunks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Hash = input.ReadBytes();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
        case 26: {
          Filename = input.ReadString();
          break;
        }
        case 34: {
          chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Hash = input.ReadBytes();
          break;
        }
        case 16: {
          Size = input.ReadUInt32();
          break;
        }
        case 26: {
          Filename = input.ReadString();
          break;
        }
        case 34: {
          chunks_.AddEntriesFrom(ref input, _repeated_chunks_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class NodeReplicationStatus : pb::IMessage<NodeReplicationStatus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<NodeReplicationStatus> _parser = new pb::MessageParser<NodeReplicationStatus>(() => new NodeReplicationStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeReplicationStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeReplicationStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeReplicationStatus(NodeReplicationStatus other) : this() {
    node_ = other.node_ != null ? other.node_.Clone() : null;
    chunkIndex_ = other.chunkIndex_;
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeReplicationStatus Clone() {
    return new NodeReplicationStatus(this);
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 1;
  private global::NodeId node_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId Node {
    get { return node_; }
    set {
      node_ = value;
    }
  }

  /// <summary>Field number for the "chunkIndex" field.</summary>
  public const int ChunkIndexFieldNumber = 2;
  private uint chunkIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChunkIndex {
    get { return chunkIndex_; }
    set {
      chunkIndex_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 4;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeReplicationStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeReplicationStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Node, other.Node)) return false;
    if (ChunkIndex != other.ChunkIndex) return false;
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (node_ != null) hash ^= Node.GetHashCode();
    if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (node_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Node);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChunkIndex);
    }
    if (Status != global::Status.Success) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ErrorMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (node_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Node);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChunkIndex);
    }
    if (Status != global::Status.Success) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ErrorMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (node_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
    }
    if (ChunkIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkIndex);
    }
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeReplicationStatus other) {
    if (other == null) {
      return;
    }
    if (other.node_ != null) {
      if (node_ == null) {
        Node = new global::NodeId();
      }
      Node.MergeFrom(other.Node);
    }
    if (other.ChunkIndex != 0) {
      ChunkIndex = other.ChunkIndex;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (node_ == null) {
            Node = new global::NodeId();
          }
          input.ReadMessage(Node);
          break;
        }
        case 16: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 24: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 34: {
          ErrorMessage = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (node_ == null) {
            Node = new global::NodeId();
          }
          input.ReadMessage(Node);
          break;
        }
        case 16: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 24: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 34: {
          ErrorMessage = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class NodeSearchResult : pb::IMessage<NodeSearchResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<NodeSearchResult> _parser = new pb::MessageParser<NodeSearchResult>(() => new NodeSearchResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NodeSearchResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeSearchResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeSearchResult(NodeSearchResult other) : this() {
    node_ = other.node_ != null ? other.node_.Clone() : null;
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    files_ = other.files_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NodeSearchResult Clone() {
    return new NodeSearchResult(this);
  }

  /// <summary>Field number for the "node" field.</summary>
  public const int NodeFieldNumber = 1;
  private global::NodeId node_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NodeId Node {
    get { return node_; }
    set {
      node_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 3;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "files" field.</summary>
  public const int FilesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::FileInfo> _repeated_files_codec
      = pb::FieldCodec.ForMessage(34, global::FileInfo.Parser);
  private readonly pbc::RepeatedField<global::FileInfo> files_ = new pbc::RepeatedField<global::FileInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FileInfo> Files {
    get { return files_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NodeSearchResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NodeSearchResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Node, other.Node)) return false;
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if(!files_.Equals(other.files_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (node_ != null) hash ^= Node.GetHashCode();
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    hash ^= files_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (node_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Node);
    }
    if (Status != global::Status.Success) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrorMessage);
    }
    files_.WriteTo(output, _repeated_files_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (node_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Node);
    }
    if (Status != global::Status.Success) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrorMessage);
    }
    files_.WriteTo(ref output, _repeated_files_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (node_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
    }
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    size += files_.CalculateSize(_repeated_files_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NodeSearchResult other) {
    if (other == null) {
      return;
    }
    if (other.node_ != null) {
      if (node_ == null) {
        Node = new global::NodeId();
      }
      Node.MergeFrom(other.Node);
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    files_.Add(other.files_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (node_ == null) {
            Node = new global::NodeId();
          }
          input.ReadMessage(Node);
          break;
        }
        case 16: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 26: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 34: {
          files_.AddEntriesFrom(input, _repeated_files_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (node_ == null) {
            Node = new global::NodeId();
          }
          input.ReadMessage(Node);
          break;
        }
        case 16: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 26: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 34: {
          files_.AddEntriesFrom(ref input, _repeated_files_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///    Node -> Hub
/// Description:
///   Register node presence in the system, by sending the IP, port, your name or an alias, and the order number
///   (index) of your node. The index must be 1, 2, or 3.
/// Response status:
///   - SUCCESS if all went well, even if there are no results
///   - MESSAGE_ERROR if the node index is not 1, 2, or 3, or the owner is empty
///   - PROCESSING_ERROR in all other cases
/// </summary>
public sealed partial class RegistrationRequest : pb::IMessage<RegistrationRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RegistrationRequest> _parser = new pb::MessageParser<RegistrationRequest>(() => new RegistrationRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegistrationRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegistrationRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegistrationRequest(RegistrationRequest other) : this() {
    owner_ = other.owner_;
    index_ = other.index_;
    port_ = other.port_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegistrationRequest Clone() {
    return new RegistrationRequest(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private string owner_ = "";
  /// <summary>
  /// Short alias or acronym of the owner of the node
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private int index_;
  /// <summary>
  /// Node index within the owner's nodes. Must be 1, 2, or 3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 3;
  private int port_;
  /// <summary>
  /// The port on which the node is listening for connections
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Port {
    get { return port_; }
    set {
      port_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegistrationRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegistrationRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    if (Index != other.Index) return false;
    if (Port != other.Port) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Port != 0) hash ^= Port.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Owner);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Index);
    }
    if (Port != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Port);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Owner);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Index);
    }
    if (Port != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Port);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (Port != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegistrationRequest other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Port != 0) {
      Port = other.Port;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadString();
          break;
        }
        case 16: {
          Index = input.ReadInt32();
          break;
        }
        case 24: {
          Port = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Owner = input.ReadString();
          break;
        }
        case 16: {
          Index = input.ReadInt32();
          break;
        }
        case 24: {
          Port = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RegistrationResponse : pb::IMessage<RegistrationResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RegistrationResponse> _parser = new pb::MessageParser<RegistrationResponse>(() => new RegistrationResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegistrationResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegistrationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegistrationResponse(RegistrationResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegistrationResponse Clone() {
    return new RegistrationResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegistrationResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegistrationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegistrationResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///    Node -> Hub
///    Get the list of nodes corresponding to the given subnet ID. Each search and replicate requests will carry this ID
///    with it, identifying the nodes involved in its processing.
/// Response status:
///   - SUCCESS if all went well, even if there are no results
///   - UNABLE_TO_COMPLETE if the hash cannot be found (this means the node list is cancelled and all messages
///                        referencing it should be ignored)
///   - PROCESSING_ERROR in all other cases
/// </summary>
public sealed partial class SubnetRequest : pb::IMessage<SubnetRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SubnetRequest> _parser = new pb::MessageParser<SubnetRequest>(() => new SubnetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubnetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubnetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubnetRequest(SubnetRequest other) : this() {
    subnetId_ = other.subnetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubnetRequest Clone() {
    return new SubnetRequest(this);
  }

  /// <summary>Field number for the "subnetId" field.</summary>
  public const int SubnetIdFieldNumber = 1;
  private int subnetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SubnetId {
    get { return subnetId_; }
    set {
      subnetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubnetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubnetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SubnetId != other.SubnetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SubnetId != 0) hash ^= SubnetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (SubnetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SubnetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (SubnetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SubnetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SubnetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubnetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubnetRequest other) {
    if (other == null) {
      return;
    }
    if (other.SubnetId != 0) {
      SubnetId = other.SubnetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SubnetId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SubnetId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SubnetResponse : pb::IMessage<SubnetResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SubnetResponse> _parser = new pb::MessageParser<SubnetResponse>(() => new SubnetResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubnetResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubnetResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubnetResponse(SubnetResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    nodes_ = other.nodes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubnetResponse Clone() {
    return new SubnetResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nodes" field.</summary>
  public const int NodesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::NodeId> _repeated_nodes_codec
      = pb::FieldCodec.ForMessage(26, global::NodeId.Parser);
  private readonly pbc::RepeatedField<global::NodeId> nodes_ = new pbc::RepeatedField<global::NodeId>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NodeId> Nodes {
    get { return nodes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubnetResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubnetResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if(!nodes_.Equals(other.nodes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    hash ^= nodes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    nodes_.WriteTo(output, _repeated_nodes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    nodes_.WriteTo(ref output, _repeated_nodes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    size += nodes_.CalculateSize(_repeated_nodes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubnetResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    nodes_.Add(other.nodes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          nodes_.AddEntriesFrom(ref input, _repeated_nodes_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///   Hub  -> Node
///   Node -> Node
/// Description:
///   Search locally for filenames matching the regex
/// Response status:
///   - SUCCESS if all went well, even if there are no results
///   - MESSAGE_ERROR if the request regexp is invalid
///   - PROCESSING_ERROR in all other cases
/// </summary>
public sealed partial class LocalSearchRequest : pb::IMessage<LocalSearchRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LocalSearchRequest> _parser = new pb::MessageParser<LocalSearchRequest>(() => new LocalSearchRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocalSearchRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalSearchRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalSearchRequest(LocalSearchRequest other) : this() {
    regex_ = other.regex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalSearchRequest Clone() {
    return new LocalSearchRequest(this);
  }

  /// <summary>Field number for the "regex" field.</summary>
  public const int RegexFieldNumber = 1;
  private string regex_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Regex {
    get { return regex_; }
    set {
      regex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocalSearchRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocalSearchRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Regex != other.Regex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Regex.Length != 0) hash ^= Regex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Regex.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Regex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Regex.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Regex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Regex.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocalSearchRequest other) {
    if (other == null) {
      return;
    }
    if (other.Regex.Length != 0) {
      Regex = other.Regex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Regex = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Regex = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class LocalSearchResponse : pb::IMessage<LocalSearchResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LocalSearchResponse> _parser = new pb::MessageParser<LocalSearchResponse>(() => new LocalSearchResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocalSearchResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalSearchResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalSearchResponse(LocalSearchResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    fileInfo_ = other.fileInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalSearchResponse Clone() {
    return new LocalSearchResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fileInfo" field.</summary>
  public const int FileInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::FileInfo> _repeated_fileInfo_codec
      = pb::FieldCodec.ForMessage(26, global::FileInfo.Parser);
  private readonly pbc::RepeatedField<global::FileInfo> fileInfo_ = new pbc::RepeatedField<global::FileInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FileInfo> FileInfo {
    get { return fileInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocalSearchResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocalSearchResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if(!fileInfo_.Equals(other.fileInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    hash ^= fileInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    fileInfo_.WriteTo(output, _repeated_fileInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    fileInfo_.WriteTo(ref output, _repeated_fileInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    size += fileInfo_.CalculateSize(_repeated_fileInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocalSearchResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    fileInfo_.Add(other.fileInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          fileInfo_.AddEntriesFrom(input, _repeated_fileInfo_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          fileInfo_.AddEntriesFrom(ref input, _repeated_fileInfo_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///   Hub -> Node
/// Description:
///   Search all nodes (using LocalSearchRequest) for filenames matching the regex and aggregated the results
///   If no nodes reply, just return what you have locally, and declare success.
/// Response status:
///   - SUCCESS if all went well, even if there are no results, and/or no other nodes replied
///   - MESSAGE_ERROR if the request regexp is invalid
///   - PROCESSING_ERROR in all other cases
/// NodeSearchResult status:
///   - NETWORK_ERROR if you cannot connect to the node
///   - MESSAGE_ERROR if the response is not parsable or has the wrong type
///   - Otherwise, use LocalSearchResponse.status
/// </summary>
public sealed partial class SearchRequest : pb::IMessage<SearchRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SearchRequest> _parser = new pb::MessageParser<SearchRequest>(() => new SearchRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SearchRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchRequest(SearchRequest other) : this() {
    regex_ = other.regex_;
    subnetId_ = other.subnetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchRequest Clone() {
    return new SearchRequest(this);
  }

  /// <summary>Field number for the "regex" field.</summary>
  public const int RegexFieldNumber = 1;
  private string regex_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Regex {
    get { return regex_; }
    set {
      regex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "subnetId" field.</summary>
  public const int SubnetIdFieldNumber = 2;
  private int subnetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SubnetId {
    get { return subnetId_; }
    set {
      subnetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SearchRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SearchRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Regex != other.Regex) return false;
    if (SubnetId != other.SubnetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Regex.Length != 0) hash ^= Regex.GetHashCode();
    if (SubnetId != 0) hash ^= SubnetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Regex.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Regex);
    }
    if (SubnetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SubnetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Regex.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Regex);
    }
    if (SubnetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SubnetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Regex.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
    }
    if (SubnetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubnetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SearchRequest other) {
    if (other == null) {
      return;
    }
    if (other.Regex.Length != 0) {
      Regex = other.Regex;
    }
    if (other.SubnetId != 0) {
      SubnetId = other.SubnetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Regex = input.ReadString();
          break;
        }
        case 16: {
          SubnetId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Regex = input.ReadString();
          break;
        }
        case 16: {
          SubnetId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SearchResponse : pb::IMessage<SearchResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SearchResponse> _parser = new pb::MessageParser<SearchResponse>(() => new SearchResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SearchResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchResponse(SearchResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    results_ = other.results_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchResponse Clone() {
    return new SearchResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "results" field.</summary>
  public const int ResultsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::NodeSearchResult> _repeated_results_codec
      = pb::FieldCodec.ForMessage(26, global::NodeSearchResult.Parser);
  private readonly pbc::RepeatedField<global::NodeSearchResult> results_ = new pbc::RepeatedField<global::NodeSearchResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NodeSearchResult> Results {
    get { return results_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SearchResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SearchResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if(!results_.Equals(other.results_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    hash ^= results_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    results_.WriteTo(output, _repeated_results_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    results_.WriteTo(ref output, _repeated_results_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    size += results_.CalculateSize(_repeated_results_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SearchResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    results_.Add(other.results_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          results_.AddEntriesFrom(input, _repeated_results_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          results_.AddEntriesFrom(ref input, _repeated_results_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///   Hub -> Node
/// Description:
///   Store locally the given file. Return the details about the file.
/// Response status:
///   - SUCCESS if all went well, even if you have the file already
///   - MESSAGE_ERROR if the filename is empty (it is OK for the data to be empty)
///   - PROCESSING_ERROR in all other cases
/// </summary>
public sealed partial class UploadRequest : pb::IMessage<UploadRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UploadRequest> _parser = new pb::MessageParser<UploadRequest>(() => new UploadRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UploadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadRequest(UploadRequest other) : this() {
    filename_ = other.filename_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadRequest Clone() {
    return new UploadRequest(this);
  }

  /// <summary>Field number for the "filename" field.</summary>
  public const int FilenameFieldNumber = 1;
  private string filename_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Filename {
    get { return filename_; }
    set {
      filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UploadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UploadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Filename != other.Filename) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Filename.Length != 0) hash ^= Filename.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Filename.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Filename);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Filename.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Filename);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Filename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UploadRequest other) {
    if (other == null) {
      return;
    }
    if (other.Filename.Length != 0) {
      Filename = other.Filename;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Filename = input.ReadString();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Filename = input.ReadString();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class UploadResponse : pb::IMessage<UploadResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UploadResponse> _parser = new pb::MessageParser<UploadResponse>(() => new UploadResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UploadResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadResponse(UploadResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    fileInfo_ = other.fileInfo_ != null ? other.fileInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadResponse Clone() {
    return new UploadResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fileInfo" field.</summary>
  public const int FileInfoFieldNumber = 3;
  private global::FileInfo fileInfo_;
  /// <summary>
  /// The FileInfo you stored or had already
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FileInfo FileInfo {
    get { return fileInfo_; }
    set {
      fileInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UploadResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UploadResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if (!object.Equals(FileInfo, other.FileInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    if (fileInfo_ != null) hash ^= FileInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (fileInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(FileInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (fileInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(FileInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (fileInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UploadResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    if (other.fileInfo_ != null) {
      if (fileInfo_ == null) {
        FileInfo = new global::FileInfo();
      }
      FileInfo.MergeFrom(other.FileInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          if (fileInfo_ == null) {
            FileInfo = new global::FileInfo();
          }
          input.ReadMessage(FileInfo);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          if (fileInfo_ == null) {
            FileInfo = new global::FileInfo();
          }
          input.ReadMessage(FileInfo);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///   Client -> Node
/// Description:
///   Replicate this file locally, if not present already. Ask for chunks from the other nodes using ChunkRequest.
///   If a ChunkRequest fails, send it to another node until you tried al nodes. If none of the nodes gives you that
///   chunk's data,
/// Response status:
///   - SUCCESS if all went well, even if you have the file already
///   - MESSAGE_ERROR if the filename in the FileInfo is empty
///   - UNABLE_TO_COMPLETE if you cannot receive all the chunks from the other nodes
///   - PROCESSING_ERROR in all other cases
/// NodeReplication status:
///   - NETWORK_ERROR if you cannot connect to the node
///   - MESSAGE_ERROR if the response is not parsable or has the wrong type
///   - Otherwise, use ChunkResponse.status
/// </summary>
public sealed partial class ReplicateRequest : pb::IMessage<ReplicateRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ReplicateRequest> _parser = new pb::MessageParser<ReplicateRequest>(() => new ReplicateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReplicateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReplicateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReplicateRequest(ReplicateRequest other) : this() {
    fileInfo_ = other.fileInfo_ != null ? other.fileInfo_.Clone() : null;
    subnetId_ = other.subnetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReplicateRequest Clone() {
    return new ReplicateRequest(this);
  }

  /// <summary>Field number for the "fileInfo" field.</summary>
  public const int FileInfoFieldNumber = 1;
  private global::FileInfo fileInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FileInfo FileInfo {
    get { return fileInfo_; }
    set {
      fileInfo_ = value;
    }
  }

  /// <summary>Field number for the "subnetId" field.</summary>
  public const int SubnetIdFieldNumber = 2;
  private int subnetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SubnetId {
    get { return subnetId_; }
    set {
      subnetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReplicateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReplicateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(FileInfo, other.FileInfo)) return false;
    if (SubnetId != other.SubnetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (fileInfo_ != null) hash ^= FileInfo.GetHashCode();
    if (SubnetId != 0) hash ^= SubnetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (fileInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FileInfo);
    }
    if (SubnetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SubnetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (fileInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(FileInfo);
    }
    if (SubnetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SubnetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (fileInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileInfo);
    }
    if (SubnetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubnetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReplicateRequest other) {
    if (other == null) {
      return;
    }
    if (other.fileInfo_ != null) {
      if (fileInfo_ == null) {
        FileInfo = new global::FileInfo();
      }
      FileInfo.MergeFrom(other.FileInfo);
    }
    if (other.SubnetId != 0) {
      SubnetId = other.SubnetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (fileInfo_ == null) {
            FileInfo = new global::FileInfo();
          }
          input.ReadMessage(FileInfo);
          break;
        }
        case 16: {
          SubnetId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (fileInfo_ == null) {
            FileInfo = new global::FileInfo();
          }
          input.ReadMessage(FileInfo);
          break;
        }
        case 16: {
          SubnetId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ReplicateResponse : pb::IMessage<ReplicateResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ReplicateResponse> _parser = new pb::MessageParser<ReplicateResponse>(() => new ReplicateResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReplicateResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReplicateResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReplicateResponse(ReplicateResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    nodeStatusList_ = other.nodeStatusList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReplicateResponse Clone() {
    return new ReplicateResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nodeStatusList" field.</summary>
  public const int NodeStatusListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::NodeReplicationStatus> _repeated_nodeStatusList_codec
      = pb::FieldCodec.ForMessage(26, global::NodeReplicationStatus.Parser);
  private readonly pbc::RepeatedField<global::NodeReplicationStatus> nodeStatusList_ = new pbc::RepeatedField<global::NodeReplicationStatus>();
  /// <summary>
  /// The status of all the requests to other nodes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NodeReplicationStatus> NodeStatusList {
    get { return nodeStatusList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReplicateResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReplicateResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if(!nodeStatusList_.Equals(other.nodeStatusList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    hash ^= nodeStatusList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    nodeStatusList_.WriteTo(output, _repeated_nodeStatusList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    nodeStatusList_.WriteTo(ref output, _repeated_nodeStatusList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    size += nodeStatusList_.CalculateSize(_repeated_nodeStatusList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReplicateResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    nodeStatusList_.Add(other.nodeStatusList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          nodeStatusList_.AddEntriesFrom(input, _repeated_nodeStatusList_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          nodeStatusList_.AddEntriesFrom(ref input, _repeated_nodeStatusList_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///   Node -> Node
/// Description:
///   Download the specified chunk.
/// Response status:
///   - SUCCESS if you have the chunk
///   - MESSAGE_ERROR if the filehash is not 16 bytes long or the index is less than zero
///   - UNABLE_TO_COMPLETE if you do not have the chunk
///   - PROCESSING_ERROR in all other cases
/// </summary>
public sealed partial class ChunkRequest : pb::IMessage<ChunkRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ChunkRequest> _parser = new pb::MessageParser<ChunkRequest>(() => new ChunkRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChunkRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkRequest(ChunkRequest other) : this() {
    fileHash_ = other.fileHash_;
    chunkIndex_ = other.chunkIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkRequest Clone() {
    return new ChunkRequest(this);
  }

  /// <summary>Field number for the "fileHash" field.</summary>
  public const int FileHashFieldNumber = 1;
  private pb::ByteString fileHash_ = pb::ByteString.Empty;
  /// <summary>
  /// MD5 of the file content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FileHash {
    get { return fileHash_; }
    set {
      fileHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunkIndex" field.</summary>
  public const int ChunkIndexFieldNumber = 2;
  private uint chunkIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChunkIndex {
    get { return chunkIndex_; }
    set {
      chunkIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChunkRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChunkRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FileHash != other.FileHash) return false;
    if (ChunkIndex != other.ChunkIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FileHash.Length != 0) hash ^= FileHash.GetHashCode();
    if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (FileHash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(FileHash);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChunkIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (FileHash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(FileHash);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChunkIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FileHash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileHash);
    }
    if (ChunkIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChunkRequest other) {
    if (other == null) {
      return;
    }
    if (other.FileHash.Length != 0) {
      FileHash = other.FileHash;
    }
    if (other.ChunkIndex != 0) {
      ChunkIndex = other.ChunkIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FileHash = input.ReadBytes();
          break;
        }
        case 16: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          FileHash = input.ReadBytes();
          break;
        }
        case 16: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ChunkResponse : pb::IMessage<ChunkResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ChunkResponse> _parser = new pb::MessageParser<ChunkResponse>(() => new ChunkResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChunkResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkResponse(ChunkResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChunkResponse Clone() {
    return new ChunkResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  /// Chunk content (1024 bytes or less)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChunkResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChunkResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChunkResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Parties:
///   Client -> Node
/// Description:
///   Download a file from the local node based on its hash
/// Response status:
///   - SUCCESS if you have the file
///   - MESSAGE_ERROR if the filehash is not 16 bytes long
///   - UNABLE_TO_COMPLETE if you do not have the file
///   - PROCESSING_ERROR in all other cases
/// </summary>
public sealed partial class DownloadRequest : pb::IMessage<DownloadRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DownloadRequest> _parser = new pb::MessageParser<DownloadRequest>(() => new DownloadRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DownloadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownloadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownloadRequest(DownloadRequest other) : this() {
    fileHash_ = other.fileHash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownloadRequest Clone() {
    return new DownloadRequest(this);
  }

  /// <summary>Field number for the "fileHash" field.</summary>
  public const int FileHashFieldNumber = 1;
  private pb::ByteString fileHash_ = pb::ByteString.Empty;
  /// <summary>
  /// MD5 of the file content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FileHash {
    get { return fileHash_; }
    set {
      fileHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DownloadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DownloadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FileHash != other.FileHash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FileHash.Length != 0) hash ^= FileHash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (FileHash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(FileHash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (FileHash.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(FileHash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FileHash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileHash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DownloadRequest other) {
    if (other == null) {
      return;
    }
    if (other.FileHash.Length != 0) {
      FileHash = other.FileHash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FileHash = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          FileHash = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class DownloadResponse : pb::IMessage<DownloadResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DownloadResponse> _parser = new pb::MessageParser<DownloadResponse>(() => new DownloadResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DownloadResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownloadResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownloadResponse(DownloadResponse other) : this() {
    status_ = other.status_;
    errorMessage_ = other.errorMessage_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownloadResponse Clone() {
    return new DownloadResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::Status status_ = global::Status.Success;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Status Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  private pb::ByteString data_ = pb::ByteString.Empty;
  /// <summary>
  /// File content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DownloadResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DownloadResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::Status.Success) hash ^= Status.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Status != global::Status.Success) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != global::Status.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DownloadResponse other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::Status.Success) {
      Status = other.Status;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Status = (global::Status) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
        case 26: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Wrapper message
/// </summary>
public sealed partial class Message : pb::IMessage<Message>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Message> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpecReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message(Message other) : this() {
    type_ = other.type_;
    localSearchRequest_ = other.localSearchRequest_ != null ? other.localSearchRequest_.Clone() : null;
    localSearchResponse_ = other.localSearchResponse_ != null ? other.localSearchResponse_.Clone() : null;
    searchRequest_ = other.searchRequest_ != null ? other.searchRequest_.Clone() : null;
    searchResponse_ = other.searchResponse_ != null ? other.searchResponse_.Clone() : null;
    uploadRequest_ = other.uploadRequest_ != null ? other.uploadRequest_.Clone() : null;
    uploadResponse_ = other.uploadResponse_ != null ? other.uploadResponse_.Clone() : null;
    replicateRequest_ = other.replicateRequest_ != null ? other.replicateRequest_.Clone() : null;
    replicateResponse_ = other.replicateResponse_ != null ? other.replicateResponse_.Clone() : null;
    chunkRequest_ = other.chunkRequest_ != null ? other.chunkRequest_.Clone() : null;
    chunkResponse_ = other.chunkResponse_ != null ? other.chunkResponse_.Clone() : null;
    downloadRequest_ = other.downloadRequest_ != null ? other.downloadRequest_.Clone() : null;
    downloadResponse_ = other.downloadResponse_ != null ? other.downloadResponse_.Clone() : null;
    registrationRequest_ = other.registrationRequest_ != null ? other.registrationRequest_.Clone() : null;
    registrationResponse_ = other.registrationResponse_ != null ? other.registrationResponse_.Clone() : null;
    subnetRequest_ = other.subnetRequest_ != null ? other.subnetRequest_.Clone() : null;
    subnetResponse_ = other.subnetResponse_ != null ? other.subnetResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message Clone() {
    return new Message(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Message.Types.Type type_ = global::Message.Types.Type.LocalSearchRequest;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Message.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "localSearchRequest" field.</summary>
  public const int LocalSearchRequestFieldNumber = 2;
  private global::LocalSearchRequest localSearchRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalSearchRequest LocalSearchRequest {
    get { return localSearchRequest_; }
    set {
      localSearchRequest_ = value;
    }
  }

  /// <summary>Field number for the "localSearchResponse" field.</summary>
  public const int LocalSearchResponseFieldNumber = 3;
  private global::LocalSearchResponse localSearchResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalSearchResponse LocalSearchResponse {
    get { return localSearchResponse_; }
    set {
      localSearchResponse_ = value;
    }
  }

  /// <summary>Field number for the "searchRequest" field.</summary>
  public const int SearchRequestFieldNumber = 4;
  private global::SearchRequest searchRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchRequest SearchRequest {
    get { return searchRequest_; }
    set {
      searchRequest_ = value;
    }
  }

  /// <summary>Field number for the "searchResponse" field.</summary>
  public const int SearchResponseFieldNumber = 5;
  private global::SearchResponse searchResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchResponse SearchResponse {
    get { return searchResponse_; }
    set {
      searchResponse_ = value;
    }
  }

  /// <summary>Field number for the "uploadRequest" field.</summary>
  public const int UploadRequestFieldNumber = 6;
  private global::UploadRequest uploadRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UploadRequest UploadRequest {
    get { return uploadRequest_; }
    set {
      uploadRequest_ = value;
    }
  }

  /// <summary>Field number for the "uploadResponse" field.</summary>
  public const int UploadResponseFieldNumber = 7;
  private global::UploadResponse uploadResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UploadResponse UploadResponse {
    get { return uploadResponse_; }
    set {
      uploadResponse_ = value;
    }
  }

  /// <summary>Field number for the "replicateRequest" field.</summary>
  public const int ReplicateRequestFieldNumber = 8;
  private global::ReplicateRequest replicateRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReplicateRequest ReplicateRequest {
    get { return replicateRequest_; }
    set {
      replicateRequest_ = value;
    }
  }

  /// <summary>Field number for the "replicateResponse" field.</summary>
  public const int ReplicateResponseFieldNumber = 9;
  private global::ReplicateResponse replicateResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReplicateResponse ReplicateResponse {
    get { return replicateResponse_; }
    set {
      replicateResponse_ = value;
    }
  }

  /// <summary>Field number for the "chunkRequest" field.</summary>
  public const int ChunkRequestFieldNumber = 10;
  private global::ChunkRequest chunkRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChunkRequest ChunkRequest {
    get { return chunkRequest_; }
    set {
      chunkRequest_ = value;
    }
  }

  /// <summary>Field number for the "chunkResponse" field.</summary>
  public const int ChunkResponseFieldNumber = 11;
  private global::ChunkResponse chunkResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChunkResponse ChunkResponse {
    get { return chunkResponse_; }
    set {
      chunkResponse_ = value;
    }
  }

  /// <summary>Field number for the "downloadRequest" field.</summary>
  public const int DownloadRequestFieldNumber = 12;
  private global::DownloadRequest downloadRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DownloadRequest DownloadRequest {
    get { return downloadRequest_; }
    set {
      downloadRequest_ = value;
    }
  }

  /// <summary>Field number for the "downloadResponse" field.</summary>
  public const int DownloadResponseFieldNumber = 13;
  private global::DownloadResponse downloadResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DownloadResponse DownloadResponse {
    get { return downloadResponse_; }
    set {
      downloadResponse_ = value;
    }
  }

  /// <summary>Field number for the "registrationRequest" field.</summary>
  public const int RegistrationRequestFieldNumber = 14;
  private global::RegistrationRequest registrationRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegistrationRequest RegistrationRequest {
    get { return registrationRequest_; }
    set {
      registrationRequest_ = value;
    }
  }

  /// <summary>Field number for the "registrationResponse" field.</summary>
  public const int RegistrationResponseFieldNumber = 15;
  private global::RegistrationResponse registrationResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegistrationResponse RegistrationResponse {
    get { return registrationResponse_; }
    set {
      registrationResponse_ = value;
    }
  }

  /// <summary>Field number for the "subnetRequest" field.</summary>
  public const int SubnetRequestFieldNumber = 16;
  private global::SubnetRequest subnetRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SubnetRequest SubnetRequest {
    get { return subnetRequest_; }
    set {
      subnetRequest_ = value;
    }
  }

  /// <summary>Field number for the "subnetResponse" field.</summary>
  public const int SubnetResponseFieldNumber = 17;
  private global::SubnetResponse subnetResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SubnetResponse SubnetResponse {
    get { return subnetResponse_; }
    set {
      subnetResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Message);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Message other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(LocalSearchRequest, other.LocalSearchRequest)) return false;
    if (!object.Equals(LocalSearchResponse, other.LocalSearchResponse)) return false;
    if (!object.Equals(SearchRequest, other.SearchRequest)) return false;
    if (!object.Equals(SearchResponse, other.SearchResponse)) return false;
    if (!object.Equals(UploadRequest, other.UploadRequest)) return false;
    if (!object.Equals(UploadResponse, other.UploadResponse)) return false;
    if (!object.Equals(ReplicateRequest, other.ReplicateRequest)) return false;
    if (!object.Equals(ReplicateResponse, other.ReplicateResponse)) return false;
    if (!object.Equals(ChunkRequest, other.ChunkRequest)) return false;
    if (!object.Equals(ChunkResponse, other.ChunkResponse)) return false;
    if (!object.Equals(DownloadRequest, other.DownloadRequest)) return false;
    if (!object.Equals(DownloadResponse, other.DownloadResponse)) return false;
    if (!object.Equals(RegistrationRequest, other.RegistrationRequest)) return false;
    if (!object.Equals(RegistrationResponse, other.RegistrationResponse)) return false;
    if (!object.Equals(SubnetRequest, other.SubnetRequest)) return false;
    if (!object.Equals(SubnetResponse, other.SubnetResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::Message.Types.Type.LocalSearchRequest) hash ^= Type.GetHashCode();
    if (localSearchRequest_ != null) hash ^= LocalSearchRequest.GetHashCode();
    if (localSearchResponse_ != null) hash ^= LocalSearchResponse.GetHashCode();
    if (searchRequest_ != null) hash ^= SearchRequest.GetHashCode();
    if (searchResponse_ != null) hash ^= SearchResponse.GetHashCode();
    if (uploadRequest_ != null) hash ^= UploadRequest.GetHashCode();
    if (uploadResponse_ != null) hash ^= UploadResponse.GetHashCode();
    if (replicateRequest_ != null) hash ^= ReplicateRequest.GetHashCode();
    if (replicateResponse_ != null) hash ^= ReplicateResponse.GetHashCode();
    if (chunkRequest_ != null) hash ^= ChunkRequest.GetHashCode();
    if (chunkResponse_ != null) hash ^= ChunkResponse.GetHashCode();
    if (downloadRequest_ != null) hash ^= DownloadRequest.GetHashCode();
    if (downloadResponse_ != null) hash ^= DownloadResponse.GetHashCode();
    if (registrationRequest_ != null) hash ^= RegistrationRequest.GetHashCode();
    if (registrationResponse_ != null) hash ^= RegistrationResponse.GetHashCode();
    if (subnetRequest_ != null) hash ^= SubnetRequest.GetHashCode();
    if (subnetResponse_ != null) hash ^= SubnetResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Type != global::Message.Types.Type.LocalSearchRequest) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (localSearchRequest_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LocalSearchRequest);
    }
    if (localSearchResponse_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LocalSearchResponse);
    }
    if (searchRequest_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SearchRequest);
    }
    if (searchResponse_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(SearchResponse);
    }
    if (uploadRequest_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(UploadRequest);
    }
    if (uploadResponse_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(UploadResponse);
    }
    if (replicateRequest_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(ReplicateRequest);
    }
    if (replicateResponse_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ReplicateResponse);
    }
    if (chunkRequest_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(ChunkRequest);
    }
    if (chunkResponse_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(ChunkResponse);
    }
    if (downloadRequest_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(DownloadRequest);
    }
    if (downloadResponse_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(DownloadResponse);
    }
    if (registrationRequest_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(RegistrationRequest);
    }
    if (registrationResponse_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(RegistrationResponse);
    }
    if (subnetRequest_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(SubnetRequest);
    }
    if (subnetResponse_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(SubnetResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Type != global::Message.Types.Type.LocalSearchRequest) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (localSearchRequest_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LocalSearchRequest);
    }
    if (localSearchResponse_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LocalSearchResponse);
    }
    if (searchRequest_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SearchRequest);
    }
    if (searchResponse_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(SearchResponse);
    }
    if (uploadRequest_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(UploadRequest);
    }
    if (uploadResponse_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(UploadResponse);
    }
    if (replicateRequest_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(ReplicateRequest);
    }
    if (replicateResponse_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ReplicateResponse);
    }
    if (chunkRequest_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(ChunkRequest);
    }
    if (chunkResponse_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(ChunkResponse);
    }
    if (downloadRequest_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(DownloadRequest);
    }
    if (downloadResponse_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(DownloadResponse);
    }
    if (registrationRequest_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(RegistrationRequest);
    }
    if (registrationResponse_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(RegistrationResponse);
    }
    if (subnetRequest_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(SubnetRequest);
    }
    if (subnetResponse_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(SubnetResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != global::Message.Types.Type.LocalSearchRequest) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (localSearchRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalSearchRequest);
    }
    if (localSearchResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalSearchResponse);
    }
    if (searchRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRequest);
    }
    if (searchResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchResponse);
    }
    if (uploadRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadRequest);
    }
    if (uploadResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadResponse);
    }
    if (replicateRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplicateRequest);
    }
    if (replicateResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplicateResponse);
    }
    if (chunkRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChunkRequest);
    }
    if (chunkResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChunkResponse);
    }
    if (downloadRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadRequest);
    }
    if (downloadResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadResponse);
    }
    if (registrationRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegistrationRequest);
    }
    if (registrationResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegistrationResponse);
    }
    if (subnetRequest_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubnetRequest);
    }
    if (subnetResponse_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubnetResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Message other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::Message.Types.Type.LocalSearchRequest) {
      Type = other.Type;
    }
    if (other.localSearchRequest_ != null) {
      if (localSearchRequest_ == null) {
        LocalSearchRequest = new global::LocalSearchRequest();
      }
      LocalSearchRequest.MergeFrom(other.LocalSearchRequest);
    }
    if (other.localSearchResponse_ != null) {
      if (localSearchResponse_ == null) {
        LocalSearchResponse = new global::LocalSearchResponse();
      }
      LocalSearchResponse.MergeFrom(other.LocalSearchResponse);
    }
    if (other.searchRequest_ != null) {
      if (searchRequest_ == null) {
        SearchRequest = new global::SearchRequest();
      }
      SearchRequest.MergeFrom(other.SearchRequest);
    }
    if (other.searchResponse_ != null) {
      if (searchResponse_ == null) {
        SearchResponse = new global::SearchResponse();
      }
      SearchResponse.MergeFrom(other.SearchResponse);
    }
    if (other.uploadRequest_ != null) {
      if (uploadRequest_ == null) {
        UploadRequest = new global::UploadRequest();
      }
      UploadRequest.MergeFrom(other.UploadRequest);
    }
    if (other.uploadResponse_ != null) {
      if (uploadResponse_ == null) {
        UploadResponse = new global::UploadResponse();
      }
      UploadResponse.MergeFrom(other.UploadResponse);
    }
    if (other.replicateRequest_ != null) {
      if (replicateRequest_ == null) {
        ReplicateRequest = new global::ReplicateRequest();
      }
      ReplicateRequest.MergeFrom(other.ReplicateRequest);
    }
    if (other.replicateResponse_ != null) {
      if (replicateResponse_ == null) {
        ReplicateResponse = new global::ReplicateResponse();
      }
      ReplicateResponse.MergeFrom(other.ReplicateResponse);
    }
    if (other.chunkRequest_ != null) {
      if (chunkRequest_ == null) {
        ChunkRequest = new global::ChunkRequest();
      }
      ChunkRequest.MergeFrom(other.ChunkRequest);
    }
    if (other.chunkResponse_ != null) {
      if (chunkResponse_ == null) {
        ChunkResponse = new global::ChunkResponse();
      }
      ChunkResponse.MergeFrom(other.ChunkResponse);
    }
    if (other.downloadRequest_ != null) {
      if (downloadRequest_ == null) {
        DownloadRequest = new global::DownloadRequest();
      }
      DownloadRequest.MergeFrom(other.DownloadRequest);
    }
    if (other.downloadResponse_ != null) {
      if (downloadResponse_ == null) {
        DownloadResponse = new global::DownloadResponse();
      }
      DownloadResponse.MergeFrom(other.DownloadResponse);
    }
    if (other.registrationRequest_ != null) {
      if (registrationRequest_ == null) {
        RegistrationRequest = new global::RegistrationRequest();
      }
      RegistrationRequest.MergeFrom(other.RegistrationRequest);
    }
    if (other.registrationResponse_ != null) {
      if (registrationResponse_ == null) {
        RegistrationResponse = new global::RegistrationResponse();
      }
      RegistrationResponse.MergeFrom(other.RegistrationResponse);
    }
    if (other.subnetRequest_ != null) {
      if (subnetRequest_ == null) {
        SubnetRequest = new global::SubnetRequest();
      }
      SubnetRequest.MergeFrom(other.SubnetRequest);
    }
    if (other.subnetResponse_ != null) {
      if (subnetResponse_ == null) {
        SubnetResponse = new global::SubnetResponse();
      }
      SubnetResponse.MergeFrom(other.SubnetResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::Message.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          if (localSearchRequest_ == null) {
            LocalSearchRequest = new global::LocalSearchRequest();
          }
          input.ReadMessage(LocalSearchRequest);
          break;
        }
        case 26: {
          if (localSearchResponse_ == null) {
            LocalSearchResponse = new global::LocalSearchResponse();
          }
          input.ReadMessage(LocalSearchResponse);
          break;
        }
        case 34: {
          if (searchRequest_ == null) {
            SearchRequest = new global::SearchRequest();
          }
          input.ReadMessage(SearchRequest);
          break;
        }
        case 42: {
          if (searchResponse_ == null) {
            SearchResponse = new global::SearchResponse();
          }
          input.ReadMessage(SearchResponse);
          break;
        }
        case 50: {
          if (uploadRequest_ == null) {
            UploadRequest = new global::UploadRequest();
          }
          input.ReadMessage(UploadRequest);
          break;
        }
        case 58: {
          if (uploadResponse_ == null) {
            UploadResponse = new global::UploadResponse();
          }
          input.ReadMessage(UploadResponse);
          break;
        }
        case 66: {
          if (replicateRequest_ == null) {
            ReplicateRequest = new global::ReplicateRequest();
          }
          input.ReadMessage(ReplicateRequest);
          break;
        }
        case 74: {
          if (replicateResponse_ == null) {
            ReplicateResponse = new global::ReplicateResponse();
          }
          input.ReadMessage(ReplicateResponse);
          break;
        }
        case 82: {
          if (chunkRequest_ == null) {
            ChunkRequest = new global::ChunkRequest();
          }
          input.ReadMessage(ChunkRequest);
          break;
        }
        case 90: {
          if (chunkResponse_ == null) {
            ChunkResponse = new global::ChunkResponse();
          }
          input.ReadMessage(ChunkResponse);
          break;
        }
        case 98: {
          if (downloadRequest_ == null) {
            DownloadRequest = new global::DownloadRequest();
          }
          input.ReadMessage(DownloadRequest);
          break;
        }
        case 106: {
          if (downloadResponse_ == null) {
            DownloadResponse = new global::DownloadResponse();
          }
          input.ReadMessage(DownloadResponse);
          break;
        }
        case 114: {
          if (registrationRequest_ == null) {
            RegistrationRequest = new global::RegistrationRequest();
          }
          input.ReadMessage(RegistrationRequest);
          break;
        }
        case 122: {
          if (registrationResponse_ == null) {
            RegistrationResponse = new global::RegistrationResponse();
          }
          input.ReadMessage(RegistrationResponse);
          break;
        }
        case 130: {
          if (subnetRequest_ == null) {
            SubnetRequest = new global::SubnetRequest();
          }
          input.ReadMessage(SubnetRequest);
          break;
        }
        case 138: {
          if (subnetResponse_ == null) {
            SubnetResponse = new global::SubnetResponse();
          }
          input.ReadMessage(SubnetResponse);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Type = (global::Message.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          if (localSearchRequest_ == null) {
            LocalSearchRequest = new global::LocalSearchRequest();
          }
          input.ReadMessage(LocalSearchRequest);
          break;
        }
        case 26: {
          if (localSearchResponse_ == null) {
            LocalSearchResponse = new global::LocalSearchResponse();
          }
          input.ReadMessage(LocalSearchResponse);
          break;
        }
        case 34: {
          if (searchRequest_ == null) {
            SearchRequest = new global::SearchRequest();
          }
          input.ReadMessage(SearchRequest);
          break;
        }
        case 42: {
          if (searchResponse_ == null) {
            SearchResponse = new global::SearchResponse();
          }
          input.ReadMessage(SearchResponse);
          break;
        }
        case 50: {
          if (uploadRequest_ == null) {
            UploadRequest = new global::UploadRequest();
          }
          input.ReadMessage(UploadRequest);
          break;
        }
        case 58: {
          if (uploadResponse_ == null) {
            UploadResponse = new global::UploadResponse();
          }
          input.ReadMessage(UploadResponse);
          break;
        }
        case 66: {
          if (replicateRequest_ == null) {
            ReplicateRequest = new global::ReplicateRequest();
          }
          input.ReadMessage(ReplicateRequest);
          break;
        }
        case 74: {
          if (replicateResponse_ == null) {
            ReplicateResponse = new global::ReplicateResponse();
          }
          input.ReadMessage(ReplicateResponse);
          break;
        }
        case 82: {
          if (chunkRequest_ == null) {
            ChunkRequest = new global::ChunkRequest();
          }
          input.ReadMessage(ChunkRequest);
          break;
        }
        case 90: {
          if (chunkResponse_ == null) {
            ChunkResponse = new global::ChunkResponse();
          }
          input.ReadMessage(ChunkResponse);
          break;
        }
        case 98: {
          if (downloadRequest_ == null) {
            DownloadRequest = new global::DownloadRequest();
          }
          input.ReadMessage(DownloadRequest);
          break;
        }
        case 106: {
          if (downloadResponse_ == null) {
            DownloadResponse = new global::DownloadResponse();
          }
          input.ReadMessage(DownloadResponse);
          break;
        }
        case 114: {
          if (registrationRequest_ == null) {
            RegistrationRequest = new global::RegistrationRequest();
          }
          input.ReadMessage(RegistrationRequest);
          break;
        }
        case 122: {
          if (registrationResponse_ == null) {
            RegistrationResponse = new global::RegistrationResponse();
          }
          input.ReadMessage(RegistrationResponse);
          break;
        }
        case 130: {
          if (subnetRequest_ == null) {
            SubnetRequest = new global::SubnetRequest();
          }
          input.ReadMessage(SubnetRequest);
          break;
        }
        case 138: {
          if (subnetResponse_ == null) {
            SubnetResponse = new global::SubnetResponse();
          }
          input.ReadMessage(SubnetResponse);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the Message message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      /// <summary>
      /// TODO Start from one to avoid problems with languages where 0 is equivalent tu NULL
      /// </summary>
      [pbr::OriginalName("LOCAL_SEARCH_REQUEST")] LocalSearchRequest = 0,
      [pbr::OriginalName("LOCAL_SEARCH_RESPONSE")] LocalSearchResponse = 1,
      [pbr::OriginalName("SEARCH_REQUEST")] SearchRequest = 2,
      [pbr::OriginalName("SEARCH_RESPONSE")] SearchResponse = 3,
      [pbr::OriginalName("UPLOAD_REQUEST")] UploadRequest = 4,
      [pbr::OriginalName("UPLOAD_RESPONSE")] UploadResponse = 5,
      [pbr::OriginalName("REPLICATE_REQUEST")] ReplicateRequest = 6,
      [pbr::OriginalName("REPLICATE_RESPONSE")] ReplicateResponse = 7,
      [pbr::OriginalName("CHUNK_REQUEST")] ChunkRequest = 8,
      [pbr::OriginalName("CHUNK_RESPONSE")] ChunkResponse = 9,
      [pbr::OriginalName("DOWNLOAD_REQUEST")] DownloadRequest = 10,
      [pbr::OriginalName("DOWNLOAD_RESPONSE")] DownloadResponse = 11,
      [pbr::OriginalName("REGISTRATION_REQUEST")] RegistrationRequest = 12,
      [pbr::OriginalName("REGISTRATION_RESPONSE")] RegistrationResponse = 13,
      [pbr::OriginalName("SUBNET_REQUEST")] SubnetRequest = 14,
      [pbr::OriginalName("SUBNET_RESPONSE")] SubnetResponse = 15,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
